{"version":3,"sources":["Components/Header.js","Components/Menu.js","Components/Modal.js","dishes.js","App.js","index.js"],"names":["Header","value","setFilterQuery","className","name","type","placeholder","onChange","event","Menu","cards","loadMore","toggleModal","onClick","length","dataLength","next","hasMore","loader","map","card","key","Date","now","Math","random","description","weight","Modal","state","ingredients","desription","weigth","ingredientName","ingredientWeigth","setDishInfo","setState","target","addIngredient","prevState","id","addDish","props","addNewDish","sumWeigth","reduce","sum","item","newDish","console","log","this","e","React","Component","data","App","isShown","dishes","query","shownDishes","double","concat","toLowerCase","dishFilter","copy","filter","dish","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4e0ad31.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ value, setFilterQuery }) => (\n  <header className=\"header\">\n    <h1>Dish</h1>\n    <ul className=\"header__nav\">\n      <li>Our Restaurant</li>\n      <li>Menu</li>\n      <li>Contact us</li>\n    </ul>\n    <input\n      name=\"filter\"\n      type=\"text\"\n      value={value}\n      placeholder=\"What dish do you want to find?\"\n      onChange={event => setFilterQuery(event)}\n      className=\"filter\"\n    />\n    <div>John C.</div>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst Menu = ({ cards, loadMore, toggleModal }) => (\n  <section>\n    <h1>Meat menu</h1>\n    <button type=\"button\" className=\"add-btn\" onClick={toggleModal}>\n      Add a new dish +\n    </button>\n\n    {cards.length ? (\n      <InfiniteScroll\n        dataLength={cards.length}\n        next={loadMore}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        {cards.map(card => (\n          <div key={Date.now() * Math.random() * 10} className=\"card\">\n            <h3>{card.name} </h3>\n            <p className=\"card__text\">{card.description}</p>\n            <p className=\"card__weigth\">{card.weight} Kcl</p>\n          </div>\n        ))}\n      </InfiniteScroll>\n    ) : (\n      <span className=\"warning\">Sorry!Nothing found</span>\n    )}\n  </section>\n);\n\nexport default Menu;\n","import React from \"react\";\n\nclass Modal extends React.Component {\n  state = {\n    name: \"\",\n    ingredients: [],\n    desription: \"\",\n    weigth: null,\n    ingredientName: \"\",\n    ingredientWeigth: \"\"\n  };\n\n  setDishInfo = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  addIngredient = () => {\n    this.setState(prevState => ({\n      ingredients: [\n        ...prevState.ingredients,\n        {\n          id: Date.now(),\n          name: prevState.ingredientName,\n          weigth: +prevState.ingredientWeigth\n        }\n      ],\n      ingredientName: \"\",\n      ingredientWeigth: \"\"\n    }));\n  };\n\n  addDish = () => {\n    const { toggleModal, addNewDish } = this.props;\n    let sumWeigth = [...this.state.ingredients].reduce(\n      (sum, item) => sum + item.weigth,\n      0\n    );\n    this.setState({ ...this.state, weigth: sumWeigth });\n\n    let newDish = {\n      name: this.state.name,\n      desription: this.state.desription,\n      weigth: this.state.desription\n    };\n    addNewDish(newDish);\n    console.log(newDish);\n    // alert(\"Dish is added\");\n    toggleModal();\n  };\n\n  render() {\n    const { toggleModal } = this.props;\n    const { name, desription, ingredientName, ingredientWeigth } = this.state;\n    console.log(this.state);\n    return (\n      <div>\n        <div className=\"overlay\" onClick={toggleModal}></div>\n        <div className=\"modal\">\n          <div className=\"modal__header\">\n            <h1>Add a new dish</h1>\n            <p>Please enter all informations about your new dish</p>\n          </div>\n          <div>\n            <input\n              name=\"name\"\n              type=\"text\"\n              value={name}\n              placeholder=\"Dish name\"\n              onChange={e => this.setDishInfo(e)}\n              className=\"modal__input\"\n            />\n          </div>\n          <div>\n            <textarea\n              name=\"desription\"\n              value={desription}\n              placeholder=\"Dish desription\"\n              onChange={e => this.setDishInfo(e)}\n              className=\"modal__input\"\n            />\n          </div>\n          <div className=\"ingred\">\n            <div>\n              <h1>Ingredients</h1>\n              <button\n                type=\"button\"\n                className=\"ingred__btn\"\n                onClick={this.addIngredient}\n              >\n                Add a new ingredient +\n              </button>\n\n              <input\n                name=\"ingredientName\"\n                type=\"text\"\n                value={ingredientName}\n                placeholder=\"Ingredient name\"\n                onChange={e => this.setDishInfo(e)}\n                className=\"modal__input\"\n              />\n              <input\n                name=\"ingredientWeigth\"\n                type=\"number\"\n                value={ingredientWeigth}\n                placeholder=\"Weight (Kcl)\"\n                onChange={e => this.setDishInfo(e)}\n                className=\"modal__input\"\n              />\n            </div>\n          </div>\n          <div>\n            <button type=\"button\" className=\"dish-add\" onClick={toggleModal}>\n              Cancel\n            </button>\n            <button type=\"button\" className=\"dish-add\" onClick={this.addDish}>\n              Add dish\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// const Modal = ({ toggleModal }) => (\n//   <>\n//     <div className=\"overlay\" onClick={toggleModal}></div>\n//     <div className=\"modal\">\n//       <div className=\"modal__header\">\n//         <h1>Add a new dish</h1>\n//         <p>Please enter all informations about your new dish</p>\n//       </div>\n//       <div>\n//         <input\n//           name=\"name\"\n//           type=\"text\"\n//           value={value}\n//           placeholder=\"Dish name\"\n//           onChange={event => setDishName(event)}\n//           className=\"modal__input\"\n//         />\n//       </div>\n//     </div>\n//   </>\n// );\n\nexport default Modal;\n","const data = [\n  {\n    name: \"Roasted Butternut Pumpkin, Shiitake Mushroom and Haloumi Salad\",\n    description:\n      \"A hearty mix of fresh greens, roasted vegetables and golden haloumi makes up this tasty winter salad.\",\n    weight: 100\n  },\n  {\n    name: \"Slow-cooked, Italian Beef Cheek Ragú with Pappardelle\",\n    description:\n      \"Slow-cooked beef cheek ragù. Serve with just-cooked pappardelle and sprinkle with lashings of Parmesan, of course.\",\n    weight: 200\n  },\n  {\n    name: \"Chicken Cotoletta with Brussels Sprouts, Rocket and Hazelnut Salad\",\n    description: \"The super-crispy outer also happens to be gluten free.\",\n    weight: 150\n  }\n];\n\nexport default data;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Menu from \"./Components/Menu\";\nimport Modal from \"./Components/Modal\";\nimport data from \"./dishes\";\n\nclass App extends React.Component {\n  state = {\n    isShown: false,\n    dishes: [],\n    query: \"\",\n    shownDishes: []\n  };\n\n  componentDidMount() {\n    this.setState({\n      dishes: data,\n      shownDishes: data\n    });\n  }\n\n  loadMore = () => {\n    let double = [...this.state.shownDishes].concat([...this.state.dishes]);\n    console.log(double);\n    this.setState({\n      shownDishes: double\n    });\n  };\n\n  setFilterQuery = event => {\n    this.setState({ query: event.target.value.toLowerCase() });\n    this.dishFilter();\n  };\n\n  dishFilter = () => {\n    let copy = [...this.state.shownDishes].filter(\n      dish =>\n        dish.name.includes(this.state.query) ||\n        dish.description.includes(this.state.query)\n    );\n    console.log(copy);\n    this.setState({ shownDishes: copy });\n  };\n\n  toggleModal = () => {\n    this.setState(prevState => {\n      return {\n        isShown: !prevState.isShown\n      };\n    });\n  };\n\n  addNewDish = newDish => {\n    this.setState(prevState => {\n      return {\n        dishes: [...prevState.dishes, newDish],\n        shownDishes: [...prevState.dishes, newDish]\n      };\n    });\n  };\n\n  render() {\n    {\n      console.log(this.state);\n    }\n    const { shownDishes, isShown, query } = this.state;\n    return (\n      <div>\n        <Header value={query} setFilterQuery={this.setFilterQuery} />\n        <Menu\n          cards={shownDishes}\n          loadMore={this.loadMore}\n          toggleModal={this.toggleModal}\n        />\n        {isShown && (\n          <Modal toggleModal={this.toggleModal} addNewDish={this.addNewDish} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}